;;; -*- mode: Lisp; Syntax: Common-Lisp; -*-

;;; Generated by Verrazano 0.5 and modified manually by K. Darabi :)

(cl:in-package :cl-user)

(cl:defpackage :zookeeper-cffi
  (:use :cffi)
  (:export "+ZOO-EPHEMERAL+"
           "+ZOO-PERM-WRITE+"
           "ZOO-STATE"
           "ZOO-AWGET"
           "ZOO-WGET"
           "ZOO-EXISTS"
           "ZOO-AGET"
           "+ZOOKEEPER-WRITE+"
           "+ZOO-CREATED-EVENT+"
           "+ZOO-DELETED-EVENT+"
           "ZOO-CHECK-OP-INIT"
           "ZOOKEEPER-INIT"
           "ZOO-SET-2"
           "ZOO-SET-OP-INIT"
           "ZSESSIONMOVED"
           "ZNOTHING"
           "ZCLOSING"
           "ZAUTHFAILED"
           "ZINVALIDACL"
           "ZINVALIDCALLBACK"
           "ZSESSIONEXPIRED"
           "ZNOTEMPTY"
           "ZNODEEXISTS"
           "ZNOCHILDRENFOREPHEMERALS"
           "ZBADVERSION"
           "ZNOAUTH"
           "ZNONODE"
           "ZAPIERROR"
           "ZINVALIDSTATE"
           "ZBADARGUMENTS"
           "ZOPERATIONTIMEOUT"
           "ZUNIMPLEMENTED"
           "ZMARSHALLINGERROR"
           "ZCONNECTIONLOSS"
           "ZDATAINCONSISTENCY"
           "ZRUNTIMEINCONSISTENCY"
           "ZSYSTEMERROR"
           "ZOK"
           "ZOO-ERRORS"
           "+ZOO-CONNECTED-STATE+"
           "ZOO-AEXISTS"
           "ZOO-GET-CHILDREN"
           "ZOO-WGET-CHILDREN"
           "+ZOO-CHILD-EVENT+"
           "+ZOO-SEQUENCE+"
           "+ZOO-PERM-ALL+"
           "ZERROR"
           "ZOOKEEPER-GET-CONNECTED-HOST"
           "SOCKLEN-T"
           "SA-DATA"
           "SA-FAMILY"
           "SOCKADDR"
           "SA-FAMILY-T"
           "ZOO-MULTI"
           "+ZOO-AUTH-FAILED-STATE+"
           "ZOO-ACREATE"
           "ZOO-OPEN-ACL-UNSAFE"
           "ZOOKEEPER-CLOSE"
           "ZOO-AGET-ACL"
           "+ZOO-PERM-READ+"
           "ZOOKEEPER-PROCESS"
           "ZOO-GET-CONTEXT"
           "+ZOO-PERM-ADMIN+"
           "ZOO-SET-WATCHER"
           "ZOO-WEXISTS"
           "ZOO-DETERMINISTIC-CONN-ORDER"
           "ZOO-DELETE-OP-INIT"
           "ZOO-ANYONE-ID-UNSAFE"
           "ZOO-GET-CHILDREN-2"
           "ZOO-CLIENT-ID"
           "PASSWD"
           "CLIENT-ID"
           "CLIENTID-T"
           "ZOO-CREATE-OP-INIT"
           "ZOO-AWGET-CHILDREN"
           "ZOO-SET"
           "ZOO-GET-ACL"
           "+ZOOKEEPER-READ+"
           "ZOO-SET-CONTEXT"
           "ZOO-ASYNC"
           "DATA-COMPLETION-T"
           "ZOO-DELETE"
           "ZOO-ADD-AUTH"
           "+ZOO-CONNECTING-STATE+"
           "ZOO-AWGET-CHILDREN-2"
           "ZOO-AMULTI"
           "ZOO-OP-RESULT-T"
           "VALUELEN"
           "VALUE"
           "ERR"
           "ZOO-OP-RESULT"
           "ZOO-OP-T"
           "TYPE"
           "ZOO-OP"
           "+ZOO-EXPIRED-SESSION-STATE+"
           "ZOO-WGET-CHILDREN-2"
           "STRING-VECTOR"
           "ZOO-SET-ACL"
           "ZOO-ADELETE"
           "ZOO-AGET-CHILDREN"
           "ZOO-ASET"
           "ZOO-RECV-TIMEOUT"
           "ZOOKEEPER-INTEREST"
           "TV-USEC"
           "TV-SEC"
           "TIMEVAL"
           "+ZOO-PERM-CREATE+"
           "ZOO-AWEXISTS"
           "ZOO-AGET-CHILDREN-2"
           "STRINGS-STAT-COMPLETION-T"
           "WATCHER-FN"
           "ZOO-SET-LOG-STREAM"
           "FILE"
           "SIZE-T"
           "+ZOO-CHANGED-EVENT+"
           "+ZOO-ASSOCIATING-STATE+"
           "+ZOO-SESSION-EVENT+"
           "STRINGS-COMPLETION-T"
           "ZOO-READ-ACL-UNSAFE"
           "ACL-COMPLETION-T"
           "ZOO-SET-DEBUG-LEVEL"
           "ZOO-LOG-LEVEL-DEBUG"
           "ZOO-LOG-LEVEL-INFO"
           "ZOO-LOG-LEVEL-WARN"
           "ZOO-LOG-LEVEL-ERROR"
           "ZOO-LOG-LEVEL"
           "ZOO-GET"
           "PZXID"
           "NUM-CHILDREN"
           "DATA-LENGTH"
           "EPHEMERAL-OWNER"
           "AVERSION"
           "CVERSION"
           "VERSION"
           "MTIME"
           "CTIME"
           "MZXID"
           "CZXID"
           "STAT"
           "INT-64-T"
           "STAT-COMPLETION-T"
           "ZOO-CREATE"
           "+ZOO-PERM-DELETE+"
           "IS-UNRECOVERABLE"
           "STRING-COMPLETION-T"
           "+ZOO-NOTWATCHING-EVENT+"
           "ZOO-CREATOR-ALL-ACL"
           "ZOO-AUTH-IDS"
           "ZOO-ASET-ACL"
           "VOID-COMPLETION-T"
           "DATA"
           "COUNT"
           "ACL-VECTOR"
           "PERMS"
           "ACL"
           "SCHEME"
           "ID"
           "INT-32-T"
           "ZHANDLE-T"))

(cl:in-package :zookeeper-cffi-bindings)

(cl:defun vtable-lookup (pobj indx coff)
  (cl:let ((vptr (cffi:mem-ref pobj :pointer coff)))
    (cffi:mem-aref vptr :pointer (cl:- indx 2))))

(cl:defmacro virtual-funcall (pobj indx coff cl:&body body)
  `(cffi:foreign-funcall-pointer (vtable-lookup ,pobj ,indx ,coff) cl:nil ,@body))

(cffi:defcstruct _zhandle
  )

(cffi::defctype zhandle-t (:struct _zhandle))

(cffi::defctype int-32-t :int)

(cffi:defcstruct id
  (scheme (:pointer :char))
  (id (:pointer :char)))

(cffi:defcstruct acl
  (perms int-32-t)
  (id (:struct id)))

(cffi:defcstruct acl-vector
  (count int-32-t)
  (data :pointer))

(cffi::defctype void-completion-t :pointer)

(cffi:defcfun ("zoo_aset_acl" zoo-aset-acl) :int (zh :pointer) (path :pointer) (version :int)
                                                 (acl :pointer) (arg5 void-completion-t)
                                                 (data :pointer))

(cffi:defcvar ("ZOO_AUTH_IDS" zoo-auth-ids) (:struct id))

(cffi:defcvar ("ZOO_CREATOR_ALL_ACL" zoo-creator-all-acl) (:struct acl-vector))

(cl:defconstant +zoo-notwatching-event+ cl:nil)

(cffi::defctype string-completion-t :pointer)

(cffi:defcfun ("is_unrecoverable" is-unrecoverable) :int (zh :pointer))

(cl:defconstant +zoo-perm-delete+ cl:nil)

(cffi:defcfun ("zoo_create" zoo-create) :int (zh :pointer) (path :pointer) (value :pointer)
                                             (valuelen :int) (acl :pointer) (flags :int)
                                             (path-buffer (:pointer :char)) (path-buffer-len :int))

(cffi::defctype stat-completion-t :pointer)

(cffi::defctype int-64-t :long)

(cffi:defcstruct stat
  (czxid int-64-t)
  (mzxid int-64-t)
  (ctime int-64-t)
  (mtime int-64-t)
  (version int-32-t)
  (cversion int-32-t)
  (aversion int-32-t)
  (ephemeral-owner int-64-t)
  (data-length int-32-t)
  (num-children int-32-t)
  (pzxid int-64-t))

(cffi:defcfun ("zoo_get" zoo-get) :int (zh :pointer) (path :pointer) (watch :int)
                                       (buffer (:pointer :char)) (buffer-len (:pointer :int))
                                       (stat :pointer))

(cffi:defcenum zoo-log-level
  (:zoo-log-level-error 1)
  (:zoo-log-level-warn 2)
  (:zoo-log-level-info 3)
  (:zoo-log-level-debug 4))

(cffi:defcfun ("zoo_set_debug_level" zoo-set-debug-level) :void (log-level zoo-log-level))

(cffi::defctype acl-completion-t :pointer)

(cffi:defcvar ("ZOO_READ_ACL_UNSAFE" zoo-read-acl-unsafe) (:struct acl-vector))

(cffi::defctype strings-completion-t :pointer)

(cl:defconstant +zoo-session-event+ cl:nil)

(cl:defconstant +zoo-associating-state+ cl:nil)

(cl:defconstant +zoo-changed-event+ cl:nil)

(cffi:defcstruct _io-marker
  (_next :pointer)
  (_sbuf :pointer)
  (_pos :int))

(cffi::defctype _-off-t :long)

(cffi::defctype _io-lock-t :void)

(cffi::defctype _-off-64-t :long)

(cffi::defctype size-t :unsigned-long)

(cffi:defcstruct _io-file
  (_flags :int)
  (_io-read-ptr (:pointer :char))
  (_io-read-end (:pointer :char))
  (_io-read-base (:pointer :char))
  (_io-write-base (:pointer :char))
  (_io-write-ptr (:pointer :char))
  (_io-write-end (:pointer :char))
  (_io-buf-base (:pointer :char))
  (_io-buf-end (:pointer :char))
  (_io-save-base (:pointer :char))
  (_io-backup-base (:pointer :char))
  (_io-save-end (:pointer :char))
  (_markers :pointer)
  (_chain :pointer)
  (_fileno :int)
  (_flags-2 :int)
  (_old-offset _-off-t)
  (_cur-column :unsigned-short)
  (_vtable-offset :char)
  (_shortbuf :char :count 1)
  (_lock :pointer)
  (_offset _-off-64-t)
  (_-pad-1 (:pointer :void))
  (_-pad-2 (:pointer :void))
  (_-pad-3 (:pointer :void))
  (_-pad-4 (:pointer :void))
  (_-pad-5 size-t)
  (_mode :int)
  (_unused-2 :char :count 20))

(cffi::defctype file (:struct _io-file))

(cffi:defcfun ("zoo_set_log_stream" zoo-set-log-stream) :void (log-stream :pointer))

(cffi::defctype watcher-fn :pointer)

(cffi::defctype strings-stat-completion-t :pointer)

(cffi:defcfun ("zoo_aget_children2" zoo-aget-children-2) :int (zh :pointer) (path :pointer)
                                                              (watch :int)
                                                              (completion strings-stat-completion-t)
                                                              (data :pointer))

(cffi:defcfun ("zoo_awexists" zoo-awexists) :int (zh :pointer) (path :pointer) (watcher watcher-fn)
                                                 (watcher-ctx (:pointer :void))
                                                 (completion stat-completion-t) (data :pointer))

(cl:defconstant +zoo-perm-create+ cl:nil)

(cffi::defctype _-time-t :long)

(cffi::defctype _-suseconds-t :long)

(cffi:defcstruct timeval
  (tv-sec _-time-t)
  (tv-usec _-suseconds-t))

(cffi:defcfun ("zookeeper_interest" zookeeper-interest) :int (zh :pointer) (fd (:pointer :int))
                                                             (interest (:pointer :int))
                                                             (tv :pointer))

(cffi:defcfun ("zoo_recv_timeout" zoo-recv-timeout) :int (zh :pointer))

(cffi:defcfun ("zoo_aset" zoo-aset) :int (zh :pointer) (path :pointer) (buffer :pointer)
                                         (buflen :int) (version :int) (completion stat-completion-t)
                                         (data :pointer))

(cffi:defcfun ("zoo_aget_children" zoo-aget-children) :int (zh :pointer) (path :pointer)
                                                           (watch :int)
                                                           (completion strings-completion-t)
                                                           (data :pointer))

(cffi:defcfun ("zoo_adelete" zoo-adelete) :int (zh :pointer) (path :pointer) (version :int)
                                               (completion void-completion-t) (data :pointer))

(cffi:defcfun ("zoo_set_acl" zoo-set-acl) :int (zh :pointer) (path :pointer) (version :int)
                                               (acl :pointer))

(cffi:defcstruct string-vector
  (count int-32-t)
  (data :pointer))

(cffi:defcfun ("zoo_wget_children2" zoo-wget-children-2) :int (zh :pointer) (path :pointer)
                                                              (watcher watcher-fn)
                                                              (watcher-ctx (:pointer :void))
                                                              (strings :pointer) (stat :pointer))

(cl:defconstant +zoo-expired-session-state+ cl:nil)


;; START of manual correction

;; TODO: the union inside the zoo-op struct (defined in zookeeper.h)
;; was not processed correctly by Verrazano. Do we need it?  Two of
;; the operations (create-op and delete-op) and the union
;; zoo-operation are declared here, manually:

(cffi:defcstruct create-op
  (path :pointer)
  (data :pointer)
  (datalen :int)
  (buf :pointer)
  (buflen :int)
  (acl (:struct acl-vector))
  (flags :int))

(cffi:defcstruct delete-op
  (path :pointer)
  (version :int))

(cffi:defcunion zoo-operation
  (create-op (:struct create-op))
  (delete-op (:struct delete-op)))

(cffi:defcstruct zoo-op
  (type :int)
  (op (:union zoo-operation)))

;; END of manual code

(cffi::defctype zoo-op-t (:struct zoo-op))

(cffi:defcstruct zoo-op-result
  (err :int)
  (value (:pointer :char))
  (valuelen :int)
  (stat :pointer))

(cffi::defctype zoo-op-result-t (:struct zoo-op-result))

(cffi:defcfun ("zoo_amulti" zoo-amulti) :int (zh :pointer) (count :int) (ops :pointer)
                                             (results :pointer) (arg5 void-completion-t)
                                             (data :pointer))

(cffi:defcfun ("zoo_awget_children2" zoo-awget-children-2) :int (zh :pointer) (path :pointer)
                                                                (watcher watcher-fn)
                                                                (watcher-ctx (:pointer :void))
                                                                (completion strings-stat-completion-t)
                                                                (data :pointer))

(cl:defconstant +zoo-connecting-state+ cl:nil)

(cffi:defcfun ("zoo_add_auth" zoo-add-auth) :int (zh :pointer) (scheme :pointer) (cert :pointer)
                                                 (cert-len :int) (completion void-completion-t)
                                                 (data :pointer))

(cffi:defcfun ("zoo_delete" zoo-delete) :int (zh :pointer) (path :pointer) (version :int))

(cffi::defctype data-completion-t :pointer)

(cffi:defcfun ("zoo_async" zoo-async) :int (zh :pointer) (path :pointer)
                                           (completion string-completion-t) (data :pointer))

(cffi:defcfun ("zoo_set_context" zoo-set-context) :void (zh :pointer) (context (:pointer :void)))

(cl:defconstant +zookeeper-read+ cl:nil)

(cffi:defcfun ("zoo_get_acl" zoo-get-acl) :int (zh :pointer) (path :pointer) (acl :pointer)
                                               (stat :pointer))

(cffi:defcfun ("zoo_set" zoo-set) :int (zh :pointer) (path :pointer) (buffer :pointer) (buflen :int)
                                       (version :int))

(cffi:defcfun ("zoo_awget_children" zoo-awget-children) :int (zh :pointer) (path :pointer)
                                                             (watcher watcher-fn)
                                                             (watcher-ctx (:pointer :void))
                                                             (completion strings-completion-t)
                                                             (data :pointer))

(cffi:defcfun ("zoo_create_op_init" zoo-create-op-init) :void (op :pointer) (path :pointer)
                                                              (value :pointer) (valuelen :int)
                                                              (acl :pointer) (flags :int)
                                                              (path-buffer (:pointer :char))
                                                              (path-buffer-len :int))

(cffi:defcstruct clientid-t
  (client-id int-64-t)
  (passwd :char :count 16))

(cffi:defcfun ("zoo_client_id" zoo-client-id) :pointer (zh :pointer))

(cffi:defcfun ("zoo_get_children2" zoo-get-children-2) :int (zh :pointer) (path :pointer)
                                                            (watch :int) (strings :pointer)
                                                            (stat :pointer))

(cffi:defcvar ("ZOO_ANYONE_ID_UNSAFE" zoo-anyone-id-unsafe) (:struct id))

(cffi:defcfun ("zoo_delete_op_init" zoo-delete-op-init) :void (op :pointer) (path :pointer)
                                                              (version :int))

(cffi:defcfun ("zoo_deterministic_conn_order" zoo-deterministic-conn-order) :void (yes-or-no :int))

(cffi:defcfun ("zoo_wexists" zoo-wexists) :int (zh :pointer) (path :pointer) (watcher watcher-fn)
                                               (watcher-ctx (:pointer :void)) (stat :pointer))

(cffi:defcfun ("zoo_set_watcher" zoo-set-watcher) watcher-fn (zh :pointer) (new-fn watcher-fn))

(cl:defconstant +zoo-perm-admin+ cl:nil)

(cffi:defcfun ("zoo_get_context" zoo-get-context) :pointer (zh :pointer))

(cffi:defcfun ("zookeeper_process" zookeeper-process) :int (zh :pointer) (events :int))

(cl:defconstant +zoo-perm-read+ cl:nil)

(cffi:defcfun ("zoo_aget_acl" zoo-aget-acl) :int (zh :pointer) (path :pointer)
                                                 (completion acl-completion-t) (data :pointer))

(cffi:defcfun ("zookeeper_close" zookeeper-close) :int (zh :pointer))

(cffi:defcvar ("ZOO_OPEN_ACL_UNSAFE" zoo-open-acl-unsafe) (:struct acl-vector))

(cffi:defcfun ("zoo_acreate" zoo-acreate) :int (zh :pointer) (path :pointer) (value :pointer)
                                               (valuelen :int) (acl :pointer) (flags :int)
                                               (completion string-completion-t) (data :pointer))

(cl:defconstant +zoo-auth-failed-state+ cl:nil)

(cffi:defcfun ("zoo_multi" zoo-multi) :int (zh :pointer) (count :int) (ops :pointer)
                                           (results :pointer))

(cffi::defctype sa-family-t :unsigned-short)

(cffi:defcstruct sockaddr
  (sa-family sa-family-t)
  (sa-data :char :count 14))

(cffi::defctype _-socklen-t :unsigned-int)

(cffi::defctype socklen-t _-socklen-t)

(cffi:defcfun ("zookeeper_get_connected_host" zookeeper-get-connected-host) :pointer (zh :pointer)
                                                                                     (addr :pointer)
                                                                                     (addr-len :pointer))

(cffi:defcfun ("zerror" zerror) :pointer (c :int))

(cl:defconstant +zoo-perm-all+ cl:nil)

(cl:defconstant +zoo-sequence+ cl:nil)

(cl:defconstant +zoo-child-event+ cl:nil)

(cffi:defcfun ("zoo_wget_children" zoo-wget-children) :int (zh :pointer) (path :pointer)
                                                           (watcher watcher-fn)
                                                           (watcher-ctx (:pointer :void))
                                                           (strings :pointer))

(cffi:defcfun ("zoo_get_children" zoo-get-children) :int (zh :pointer) (path :pointer) (watch :int)
                                                         (strings :pointer))

(cffi:defcfun ("zoo_aexists" zoo-aexists) :int (zh :pointer) (path :pointer) (watch :int)
                                               (completion stat-completion-t) (data :pointer))

(cl:defconstant +zoo-connected-state+ cl:nil)

(cffi:defcenum zoo-errors
  (:zok 0)
  (:zsystemerror -1)
  (:zruntimeinconsistency -2)
  (:zdatainconsistency -3)
  (:zconnectionloss -4)
  (:zmarshallingerror -5)
  (:zunimplemented -6)
  (:zoperationtimeout -7)
  (:zbadarguments -8)
  (:zinvalidstate -9)
  (:zapierror -100)
  (:znonode -101)
  (:znoauth -102)
  (:zbadversion -103)
  (:znochildrenforephemerals -108)
  (:znodeexists -110)
  (:znotempty -111)
  (:zsessionexpired -112)
  (:zinvalidcallback -113)
  (:zinvalidacl -114)
  (:zauthfailed -115)
  (:zclosing -116)
  (:znothing -117)
  (:zsessionmoved -118))

(cffi:defcfun ("zoo_set_op_init" zoo-set-op-init) :void (op :pointer) (path :pointer)
                                                        (buffer :pointer) (buflen :int)
                                                        (version :int) (stat :pointer))

(cffi:defcfun ("zoo_set2" zoo-set-2) :int (zh :pointer) (path :pointer) (buffer :pointer)
                                          (buflen :int) (version :int) (stat :pointer))

(cffi:defcfun ("zookeeper_init" zookeeper-init) :pointer (host :pointer) (fn watcher-fn)
                                                         (recv-timeout :int) (clientid :pointer)
                                                         (context (:pointer :void)) (flags :int))

(cffi:defcfun ("zoo_check_op_init" zoo-check-op-init) :void (op :pointer) (path :pointer)
                                                            (version :int))

(cl:defconstant +zoo-deleted-event+ cl:nil)

(cl:defconstant +zoo-created-event+ cl:nil)

(cl:defconstant +zookeeper-write+ cl:nil)

(cffi:defcfun ("zoo_aget" zoo-aget) :int (zh :pointer) (path :pointer) (watch :int)
                                         (completion data-completion-t) (data :pointer))

(cffi:defcfun ("zoo_exists" zoo-exists) :int (zh :pointer) (path :pointer) (watch :int)
                                             (stat :pointer))

(cffi:defcfun ("zoo_wget" zoo-wget) :int (zh :pointer) (path :pointer) (watcher watcher-fn)
                                         (watcher-ctx (:pointer :void)) (buffer (:pointer :char))
                                         (buffer-len (:pointer :int)) (stat :pointer))

(cffi:defcfun ("zoo_awget" zoo-awget) :int (zh :pointer) (path :pointer) (watcher watcher-fn)
                                           (watcher-ctx (:pointer :void))
                                           (completion data-completion-t) (data :pointer))

(cffi:defcfun ("zoo_state" zoo-state) :int (zh :pointer))

(cl:defconstant +zoo-perm-write+ cl:nil)

(cl:defconstant +zoo-ephemeral+ cl:nil)
